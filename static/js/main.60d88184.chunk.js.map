{"version":3,"sources":["components/Joke.js","components/JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","className","icon","onClick","thumbsUp","style","borderColor","getColor","thumbsDown","text","getEmoji","Component","JokeList","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","j","handleclick","bind","length","getJokes","numJokes","Axios","get","headers","Accept","res","newJoke","data","joke","has","console","log","push","id","uuidv4","setState","st","setItem","stringify","alert","vote","size","spin","sort","a","b","src","alt","key","handleVote","defaultProps","library","add","faThumbsUp","faThumbsDown","faLaugh","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60d88184.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport './Joke.css'\n\nclass Joke extends Component {\n    getColor() {\n        if (this.props.votes >= 15) {\n          return \"#4CAF50\";\n        } else if (this.props.votes >= 12) {\n          return \"#8BC34A\";\n        } else if (this.props.votes >= 9) {\n          return \"#CDDC39\";\n        } else if (this.props.votes >= 6) {\n          return \"#FFEB3B\";\n        } else if (this.props.votes >= 3) {\n          return \"#FFC107\";\n        } else if (this.props.votes >= 0) {\n          return \"#FF9800\";\n        } else {\n          return \"#f44336\";\n        }\n    }\n\n    getEmoji() {\n        if (this.props.votes >= 15) {\n          return \"em em-rolling_on_the_floor_laughing\";\n        } else if (this.props.votes >= 12) {\n          return \"em em-laughing\";\n        } else if (this.props.votes >= 9) {\n          return \"em em-smiley\";\n        } else if (this.props.votes >= 6) {\n          return \"em em-slightly_smiling_face\";\n        } else if (this.props.votes >= 3) {\n          return \"em em-neutral_face\";\n        } else if (this.props.votes >= 0) {\n          return \"em em-confused\";\n        } else {\n          return \"em em-angry\";\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Joke\">\n                <div className=\"Joke-buttons\">\n                    <FontAwesomeIcon icon=\"thumbs-up\" onClick={this.props.thumbsUp} />\n                    <span className=\"Joke-votes\" style={{borderColor: this.getColor()}} >{this.props.votes}</span>\n                    <FontAwesomeIcon icon=\"thumbs-down\" onClick={this.props.thumbsDown} />\n                </div>\n                <div className=\"Joke-text\">{this.props.text}</div>\n                <div className=\"Joke-smiley\">\n                    <i className={this.getEmoji()}></i>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Joke;","import React, { Component } from 'react';\nimport Axios from 'axios';\nimport './JokeList.css';\nimport Joke from './Joke';\nimport { v4 as uuidv4 } from 'uuid';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass JokeList extends Component {\n\tstatic defaultProps = {\n\t\tnumJokes: 10\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n            jokes: JSON.parse(window.localStorage.getItem('jokes') || '[]'),\n            loading: false\n\t\t};\n\t\tthis.seenJokes = new Set(this.state.jokes.map(j => j.text))\n\t\tthis.handleclick = this.handleclick.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tif (this.state.jokes.length === 0) this.getJokes();\n\t}\n\n\tasync getJokes() {\n\t\ttry {\n\t\t\tlet jokes = [];\n\t\t\twhile (jokes.length < this.props.numJokes) {\n\t\t\t\tlet res = await Axios.get('https://icanhazdadjoke.com/', {\n\t\t\t\t\theaders: { Accept: 'application/json' }\n\t\t\t\t});\n\t\t\t\tlet newJoke = res.data.joke;\n\t\t\t\tif(!this.seenJokes.has(newJoke)) {\n\t\t\t\t\tjokes.push({\n\t\t\t\t\t\tid: uuidv4(),\n\t\t\t\t\t\ttext: res.data.joke,\n\t\t\t\t\t\tvotes: 0\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"FOUND A DUPLICATE\");\n\t\t\t\t\tconsole.log(newJoke)\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.setState(\n\t\t\t\t(st) => ({\n\t\t\t\t\tloading: false,\n\t\t\t\t\tjokes: [ ...st.jokes, ...jokes ]\n\t\t\t\t}),\n\t\t\t\t() => window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes))\n\t\t\t);\n\t\t} catch(e) {\n\t\t\talert(e);\n\t\t\tthis.setState({ loading: false })\n\t\t}\n\t}\n\n\thandleVote(id, vote) {\n\t\tthis.setState(\n\t\t\t(st) => ({\n\t\t\t\tjokes: st.jokes.map((j) => (j.id === id ? { ...j, votes: j.votes + vote } : j))\n\t\t\t}),\n\t\t\t() => window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes))\n\t\t);\n\t}\n\n\thandleclick() {\n        this.setState({ loading: true}, this.getJokes)\n\t}\n\n\trender() {\n        if(this.state.loading) {\n            return (\n                <div className=\"JokeList-spinner\">\n                    <FontAwesomeIcon icon=\"laugh\" size=\"6x\" spin />\n                    <h1 className=\"JokeList-title\">Loading...</h1>\n                </div>\n            )\n\t\t}\n\t\tlet jokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\n\t\treturn (\n\t\t\t<div className=\"JokeList\">\n\t\t\t\t<div className=\"JokeList-sidebar\">\n\t\t\t\t\t<h1 className=\"JokeList-title\">\n\t\t\t\t\t\t<span>Cheezy</span> Jokes\n\t\t\t\t\t</h1>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\n\t\t\t\t\t\talt=\"jokes\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button className=\"JokeList-button\" onClick={this.handleclick}>\n\t\t\t\t\t\tMore Jokes\n\t\t\t\t\t</button>\n\t\t\t\t\t<h4 className=\"JokeList-length\">Amount: {this.state.jokes.length}</h4>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"JokeList-jokes\">\n\t\t\t\t\t{jokes.map((j) => (\n\t\t\t\t\t\t<Joke\n\t\t\t\t\t\t\tkey={j.id}\n\t\t\t\t\t\t\tvotes={j.votes}\n\t\t\t\t\t\t\ttext={j.text}\n\t\t\t\t\t\t\tthumbsUp={() => this.handleVote(j.id, 1)}\n\t\t\t\t\t\t\tthumbsDown={() => this.handleVote(j.id, -1)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default JokeList;\n","import React from 'react';\nimport './App.css';\nimport JokeList from './components/JokeList';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faThumbsUp, faThumbsDown, faLaugh } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faThumbsUp, faThumbsDown, faLaugh)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}